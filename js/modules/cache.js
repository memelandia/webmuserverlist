// js/modules/cache.js
// Sistema de cach√© inteligente para MuServerList

// =====================================================
// CONFIGURACI√ìN DE CACH√â
// =====================================================

const CACHE_CONFIG = {
    // Duraciones de cach√© en milisegundos
    HOMEPAGE_DATA: 5 * 60 * 1000,      // 5 minutos - datos de homepage
    SERVER_LIST: 3 * 60 * 1000,        // 3 minutos - lista de servidores
    SERVER_DETAIL: 10 * 60 * 1000,     // 10 minutos - detalles de servidor
    USER_PROFILE: 15 * 60 * 1000,      // 15 minutos - perfil de usuario
    RANKING_DATA: 2 * 60 * 1000,       // 2 minutos - datos de ranking
    CALENDAR_DATA: 5 * 60 * 1000,      // 5 minutos - calendario de aperturas
    GLOBAL_STATS: 10 * 60 * 1000,      // 10 minutos - estad√≠sticas globales
    
    // Configuraci√≥n general
    MAX_CACHE_SIZE: 50,                 // M√°ximo n√∫mero de entradas en cach√©
    CLEANUP_INTERVAL: 30 * 60 * 1000,  // Limpieza cada 30 minutos
    VERSION: '1.0'                      // Versi√≥n del cach√© (para invalidar en actualizaciones)
};

// Prefijos para diferentes tipos de datos
const CACHE_PREFIXES = {
    HOMEPAGE: 'homepage_',
    SERVER: 'server_',
    USER: 'user_',
    LIST: 'list_',
    STATS: 'stats_'
};

// =====================================================
// CLASE PRINCIPAL DE CACH√â
// =====================================================

class CacheManager {
    constructor() {
        this.isSupported = this.checkLocalStorageSupport();
        this.initCleanupTimer();
        this.logCacheInfo();
    }

    checkLocalStorageSupport() {
        try {
            const test = '__cache_test__';
            localStorage.setItem(test, 'test');
            localStorage.removeItem(test);
            return true;
        } catch (e) {
            console.warn('üö® localStorage no disponible, cach√© deshabilitado');
            return false;
        }
    }

    logCacheInfo() {
        if (this.isSupported) {
            console.log('‚úÖ Sistema de cach√© inicializado');
            console.log('üìä Configuraci√≥n de cach√©:', CACHE_CONFIG);
        }
    }

    // =====================================================
    // M√âTODOS PRINCIPALES DE CACH√â
    // =====================================================

    /**
     * Obtiene datos del cach√© o ejecuta la funci√≥n si no existe/expir√≥
     * @param {string} key - Clave √∫nica para el cach√©
     * @param {Function} fetchFunction - Funci√≥n async que obtiene los datos
     * @param {number} duration - Duraci√≥n del cach√© en ms
     * @returns {Promise} - Datos cacheados o frescos
     */
    async getCachedData(key, fetchFunction, duration = CACHE_CONFIG.HOMEPAGE_DATA) {
        if (!this.isSupported) {
            return await fetchFunction();
        }

        try {
            // Intentar obtener datos del cach√©
            const cached = this.get(key);
            if (cached && !this.isExpired(cached, duration)) {
                console.log(`üéØ Cache HIT para: ${key}`);
                return cached.data;
            }

            // Si no hay cach√© o expir√≥, obtener datos frescos
            console.log(`üîÑ Cache MISS para: ${key}, obteniendo datos frescos...`);
            const freshData = await fetchFunction();
            
            // Guardar en cach√©
            this.set(key, freshData);
            
            return freshData;
        } catch (error) {
            console.error(`‚ùå Error en cach√© para ${key}:`, error);
            // En caso de error, intentar obtener datos directamente
            return await fetchFunction();
        }
    }

    /**
     * Guarda datos en el cach√©
     * @param {string} key - Clave √∫nica
     * @param {any} data - Datos a guardar
     */
    set(key, data) {
        if (!this.isSupported) return;

        try {
            const cacheEntry = {
                data: data,
                timestamp: Date.now(),
                version: CACHE_CONFIG.VERSION
            };

            localStorage.setItem(this.getCacheKey(key), JSON.stringify(cacheEntry));
            
            // Limpiar cach√© si est√° muy lleno
            this.cleanupIfNeeded();
        } catch (error) {
            console.warn(`‚ö†Ô∏è Error guardando en cach√© ${key}:`, error);
            // Si el localStorage est√° lleno, limpiar y reintentar
            if (error.name === 'QuotaExceededError') {
                this.clearExpired();
                try {
                    localStorage.setItem(this.getCacheKey(key), JSON.stringify(cacheEntry));
                } catch (retryError) {
                    console.error('‚ùå Error cr√≠tico de cach√©:', retryError);
                }
            }
        }
    }

    /**
     * Obtiene datos del cach√©
     * @param {string} key - Clave √∫nica
     * @returns {Object|null} - Datos cacheados o null
     */
    get(key) {
        if (!this.isSupported) return null;

        try {
            const cached = localStorage.getItem(this.getCacheKey(key));
            if (!cached) return null;

            const parsed = JSON.parse(cached);
            
            // Verificar versi√≥n del cach√©
            if (parsed.version !== CACHE_CONFIG.VERSION) {
                this.remove(key);
                return null;
            }

            return parsed;
        } catch (error) {
            console.warn(`‚ö†Ô∏è Error leyendo cach√© ${key}:`, error);
            this.remove(key);
            return null;
        }
    }

    /**
     * Verifica si una entrada de cach√© ha expirado
     * @param {Object} cacheEntry - Entrada de cach√©
     * @param {number} duration - Duraci√≥n en ms
     * @returns {boolean} - true si expir√≥
     */
    isExpired(cacheEntry, duration) {
        return (Date.now() - cacheEntry.timestamp) > duration;
    }

    /**
     * Elimina una entrada espec√≠fica del cach√©
     * @param {string} key - Clave a eliminar
     */
    remove(key) {
        if (!this.isSupported) return;
        localStorage.removeItem(this.getCacheKey(key));
    }

    /**
     * Invalida cach√© por patr√≥n (ej: todos los servidores)
     * @param {string} pattern - Patr√≥n a buscar
     */
    invalidatePattern(pattern) {
        if (!this.isSupported) return;

        const keysToRemove = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.includes(pattern)) {
                keysToRemove.push(key);
            }
        }

        keysToRemove.forEach(key => localStorage.removeItem(key));
        console.log(`üóëÔ∏è Invalidadas ${keysToRemove.length} entradas con patr√≥n: ${pattern}`);
    }

    // =====================================================
    // M√âTODOS DE LIMPIEZA Y MANTENIMIENTO
    // =====================================================

    /**
     * Limpia entradas expiradas del cach√©
     */
    clearExpired() {
        if (!this.isSupported) return;

        let removedCount = 0;
        const keysToRemove = [];

        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('musl_cache_')) {
                try {
                    const cached = JSON.parse(localStorage.getItem(key));
                    // Usar duraci√≥n m√°xima para limpieza general
                    if (this.isExpired(cached, CACHE_CONFIG.USER_PROFILE)) {
                        keysToRemove.push(key);
                    }
                } catch (error) {
                    // Si no se puede parsear, eliminar
                    keysToRemove.push(key);
                }
            }
        }

        keysToRemove.forEach(key => {
            localStorage.removeItem(key);
            removedCount++;
        });

        if (removedCount > 0) {
            console.log(`üßπ Limpieza de cach√©: ${removedCount} entradas eliminadas`);
        }
    }

    /**
     * Limpia el cach√© si est√° muy lleno
     */
    cleanupIfNeeded() {
        const cacheKeys = this.getCacheKeys();
        if (cacheKeys.length > CACHE_CONFIG.MAX_CACHE_SIZE) {
            console.log('üö® Cach√© lleno, iniciando limpieza...');
            this.clearExpired();
        }
    }

    /**
     * Obtiene todas las claves de cach√©
     * @returns {Array} - Array de claves de cach√©
     */
    getCacheKeys() {
        const keys = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith('musl_cache_')) {
                keys.push(key);
            }
        }
        return keys;
    }

    /**
     * Genera clave de cach√© con prefijo
     * @param {string} key - Clave original
     * @returns {string} - Clave con prefijo
     */
    getCacheKey(key) {
        return `musl_cache_${key}`;
    }

    /**
     * Inicializa timer de limpieza autom√°tica
     */
    initCleanupTimer() {
        if (!this.isSupported) return;

        setInterval(() => {
            this.clearExpired();
        }, CACHE_CONFIG.CLEANUP_INTERVAL);
    }

    /**
     * Obtiene estad√≠sticas del cach√©
     * @returns {Object} - Estad√≠sticas del cach√©
     */
    getStats() {
        if (!this.isSupported) return { supported: false };

        const keys = this.getCacheKeys();
        let totalSize = 0;
        let expiredCount = 0;

        keys.forEach(key => {
            try {
                const value = localStorage.getItem(key);
                totalSize += value.length;
                
                const cached = JSON.parse(value);
                if (this.isExpired(cached, CACHE_CONFIG.USER_PROFILE)) {
                    expiredCount++;
                }
            } catch (error) {
                expiredCount++;
            }
        });

        return {
            supported: true,
            totalEntries: keys.length,
            expiredEntries: expiredCount,
            totalSizeKB: Math.round(totalSize / 1024),
            maxEntries: CACHE_CONFIG.MAX_CACHE_SIZE
        };
    }

    /**
     * Limpia todo el cach√©
     */
    clearAll() {
        if (!this.isSupported) return;

        const keys = this.getCacheKeys();
        keys.forEach(key => localStorage.removeItem(key));
        console.log(`üóëÔ∏è Cach√© completamente limpiado: ${keys.length} entradas eliminadas`);
    }
}

// =====================================================
// INSTANCIA GLOBAL Y FUNCIONES DE CONVENIENCIA
// =====================================================

// Crear instancia global del cach√©
const cacheManager = new CacheManager();

// Funciones de conveniencia para diferentes tipos de datos
export const cache = {
    // Datos de homepage
    getHomepageData: (fetchFn) => cacheManager.getCachedData(
        `${CACHE_PREFIXES.HOMEPAGE}data`, 
        fetchFn, 
        CACHE_CONFIG.HOMEPAGE_DATA
    ),

    // Detalles de servidor
    getServerData: (serverId, fetchFn) => cacheManager.getCachedData(
        `${CACHE_PREFIXES.SERVER}${serverId}`, 
        fetchFn, 
        CACHE_CONFIG.SERVER_DETAIL
    ),

    // Perfil de usuario
    getUserProfile: (userId, fetchFn) => cacheManager.getCachedData(
        `${CACHE_PREFIXES.USER}${userId}`, 
        fetchFn, 
        CACHE_CONFIG.USER_PROFILE
    ),

    // Lista de servidores con filtros - VERSI√ìN MEJORADA
    getServerList: async (filterHash, fetchFn) => {
        const cacheKey = `${CACHE_PREFIXES.LIST}servers_${filterHash}`;

        // Verificar si ya existe en cach√©
        const cached = cacheManager.get(cacheKey);
        if (cached && !cacheManager.isExpired(cached, CACHE_CONFIG.SERVER_LIST)) {
            console.log(`üéØ Cache HIT para filtros: ${filterHash}`);
            return cached.data;
        }

        // Si no hay cach√© o expir√≥, obtener datos frescos
        console.log(`üîÑ Cache MISS para filtros: ${filterHash}, obteniendo datos frescos...`);
        const freshData = await fetchFn();

        // Guardar en cach√© con clave espec√≠fica
        cacheManager.set(cacheKey, freshData);

        return freshData;
    },

    // Datos de ranking
    getRankingData: (type, page, fetchFn) => cacheManager.getCachedData(
        `${CACHE_PREFIXES.STATS}ranking_${type}_${page}`, 
        fetchFn, 
        CACHE_CONFIG.RANKING_DATA
    ),

    // Datos de calendario
    getCalendarData: (fetchFn) => cacheManager.getCachedData(
        `${CACHE_PREFIXES.LIST}calendar`, 
        fetchFn, 
        CACHE_CONFIG.CALENDAR_DATA
    ),

    // M√©todos de utilidad
    invalidateServer: (serverId) => cacheManager.remove(`${CACHE_PREFIXES.SERVER}${serverId}`),
    invalidateUser: (userId) => cacheManager.remove(`${CACHE_PREFIXES.USER}${userId}`),
    invalidateHomepage: () => cacheManager.remove(`${CACHE_PREFIXES.HOMEPAGE}data`),
    invalidateServerLists: () => cacheManager.invalidatePattern(CACHE_PREFIXES.LIST),
    
    // Estad√≠sticas y limpieza
    getStats: () => cacheManager.getStats(),
    clearExpired: () => cacheManager.clearExpired(),
    clearAll: () => cacheManager.clearAll()
};

// Exportar tambi√©n el manager para uso avanzado
export { cacheManager, CACHE_CONFIG, CACHE_PREFIXES };

// Log de inicializaci√≥n
console.log('üöÄ M√≥dulo de cach√© cargado exitosamente');
